setwd("~/Sergey/Coursera/DataScience/Reprodusible research/Assignment 1")
activity <- read.csv("~/Sergey/Coursera/DataScience/Reprodusible research/Assignment 1/activity.csv")
View(activity)
str(activity)
aggregate(steps~date)
aggregate(steps~date, data=activity)
head(aggregate(steps~date, mean, data=activity))
hist(activity$steps)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
tapply(activity$steps, activity$date, sum, na.rm=TRUE)
str(aggregate(steps~date, mean, data=activity))
dim(aggregate(steps~date, mean, data=activity)
length(aggregate(steps~date, mean, data=activity))
head(aggregate(steps~date, mean, data=activity))[,2]
mean(aggregate(steps~date, mean, data=activity))
mean(aggregate(steps~date, mean, data=activity), na.rm = TRUE)
mean(aggregate(steps~date, mean, data=activity)[,2])
mean(aggregate(steps~date, sum, data=activity)[,2])
totSteps <- aggregate(steps~date, sum, data=activity)
?hist
hist(totSteps,5)
hist(totSteps$steps,5)
hist(totSteps$steps,25)
hist(totSteps$steps,15)
hist(totSteps$steps,breaks =  15, freq = TRUE)
hist(totSteps$steps,breaks =  15, freq = FALSE)
hist(totSteps$steps,breaks =  15)
hist(totSteps$steps,breaks =  15, freq = FALSE)
hist(totSteps$steps,breaks =  11, freq = FALSE)
hist(totSteps$steps,breaks =  11, freq = FALSE)
hist(totSteps$steps,breaks =  111, freq = FALSE)
hist(totSteps$steps,breaks =  11, freq = FALSE)
mean(totSteps$steps)
hist(totSteps$steps,breaks =  11, freq = FALSE, main = "Total steps each day")
hist(totSteps$steps,breaks =  11, freq = FALSE, main = "Total steps each day", xlab = "Total steps")
hist(totSteps$steps, freq = FALSE, main = "Total steps each day", xlab = "Total steps")
hist(totSteps$steps,breaks =  11, freq = FALSE, main = "Total steps each day", xlab = "Total steps")
averSteps <- aggregate(steps~interval, mean, data=activity)
plot(averSteps$interval, averSteps$steps, type = "l")
plot(averSteps$interval, averSteps$steps, type = "l", main = "Average number of steps across day", xlab = "Interval", ylab = "Steps")
max(averSteps$steps)
which.max(averSteps$steps)
averSteps[which.max(averSteps$steps)]
averSteps[which.max(averSteps$steps),]
sum(is.na(activity$steps))
head(averSteps)
?which
which(averSteps$interval = 10)
which(averSteps$interval = "10")
which(averSteps$interval == "10")
which(averSteps$interval == 10)
?sapply
adjActivity <- sapply(activity, function(x) {if is.na(x$steps) {x$steps <- averSteps$steps[which(averSteps$interval == x$interval)]} })
?if
adjActivity <- sapply(activity, function(x) {if (is.na(x$steps)) {x$steps <- averSteps$steps[which(averSteps$interval == x$interval)]} })
which(averSteps$interval == x$interval)
str(activity)
head(activity[c("steps","interval")])
head(activity[c("steps","date","interval")])
adjActivity <- sapply(activity[c("steps","date","interval")], function(x) {if (is.na(x$steps)) {x$steps <- averSteps$steps[which(averSteps$interval == x$interval)]} })
str(x)
for(x in head(activity)){x}
for(x in head(activity)){print(x)}
length(activity)
dim(activity)
dim(activity)[1,]
dim(activity)[1]
for(i in 1:5){if (is.na(activity[i,]$steps)) {print(activity[i,]$interval)} }
adjActivity <- activity
for(i in 1:5){if (is.na(activity[i,]$steps)) {adjActivity[i,]$steps <-averSteps$steps[which(averSteps$interval == activity[i,]$interval)];  print(adjActivity[i,])} }
for(i in 1:dim(activity)[1]){if (is.na(activity[i,]$steps)) {adjActivity[i,]$steps <-averSteps$steps[which(averSteps$interval == activity[i,]$interval)] } }
head(activity)
head(adjActivity)
head(averSteps)
adjTotSteps <- aggregate(steps~date, sum, data=adjActivity)
hist(adjTotSteps$steps,breaks =  11, freq = FALSE, main = "Adjusted total steps each day", xlab = "Total steps")
mean(adjTotSteps$steps)
median(adjTotSteps$steps)
str(activity)
head(as.POSIXct(activity$date, format="%Y/%m/%d"))
head(as.POSIXct(activity$date, format="%Y-%m-%d"))
adjActivity$date <- as.POSIXct(activity$date, format="%Y-%m-%d")
str(adjActivity)
?weekdays
head(weekdays(adjActivity$date))
head(as.POSIXlt(activityDataImputed$date))
adjActivity$date[1]
activityDataImputed <-  ifelse(as.POSIXlt(activity$date, format="%Y-%m-%d")$wday %in% c(0,6), 'weekend', 'weekday')
View(activityDataImputed)
str(activityDataImputed)
str(as.factor(activityDataImputed))
head(as.POSIXlt(activity$date, format="%Y-%m-%d")$wday)
head(as.POSIXlt(activity$date, format="%Y-%m-%d")$wday,20)
as.POSIXlt(activity$date, format="%Y-%m-%d")$wday[5:15]
as.POSIXlt(activity$date, format="%Y-%m-%d")$wday[50:55]
as.POSIXlt(activity$date, format="%Y-%m-%d")$wday[150:155]
as.POSIXlt(activity$date, format="%Y-%m-%d")$wday[1500:1505]
head(as.factor(as.POSIXlt(activity$date, format="%Y-%m-%d")$wday))
s <- as.factor(as.POSIXlt(activity$date, format="%Y-%m-%d")$wday)
View(s)
str(s)
s <- as.factor(weekdays(as.POSIXlt(activity$date, format="%Y-%m-%d"))
)
str(s)
lvl <- sapply(s, function(x){ifelse(x in c("Suturday","Sunday"),"weekend","weekday") })
?sapply
lvl <- sapply(s, function(x) {ifelse(x in c("Suturday","Sunday"),"weekend","weekday") })
lvl <- sapply(s, function(x) {ifelse(x %in% c("Suturday","Sunday"),"weekend","weekday") })
View(lvl)
str(lvl)
lvl[300:305]
str(as.factor(lvl))
adjActivity$day <- as.factor(weekdays(as.POSIXlt(activity$date, format="%Y-%m-%d"))
)
hear(aadjActiadjActivity)
hear(adjActivity)
head(adjActivity)
adjActivity$lvl <- sapply(adjActivity$day, function(x) {ifelse(x %in% c("Suturday","Sunday"),"weekend","weekday") })
str(adjActivity)
adjActivity$lvl <- as.factor(sapply(adjActivity$day, function(x) {ifelse(x %in% c("Suturday","Sunday"),"weekend","weekday") }))
str(adjActivity)
adjActivity$day <- weekdays(as.POSIXlt(activity$date, format="%Y-%m-%d"))
wdlvl <- as.factor(sapply(adjActivity$day, function(x) {ifelse(x %in% c("Suturday","Sunday"),"weekend","weekday") }))
averStepswd <- aggregate(steps~interval+lvl, mean, data=activity)
head(averStepswd)
View(averStepswd)
averStepswd <- aggregate(steps~interval+lvl, mean, data=adjActivity)
View(averStepswd)
head(averStepswd)
averStepswd <- aggregate(steps~interval+lvl, mean, data=activity)
head(averStepswd)
str(averStepswd)
averStepswd$lvl <- as.factor(averStepswd$lvl)
str(averStepswd)
require(ggplot2)
qplot(averStepswd, facets = . ~ lvl)
require(lattice)
?xyplot
xyplot(averStepswd$steps~averStepswd$interval | averStepswd$lvl)
?plot
library(reshape2)
?cast
head(dcast(averStepswd, interval+steps~lvl))
View(averStepswd)
head(dcast(averStepswd, interval~lvl))
tail(dcast(averStepswd, interval~lvl))
verStepswd <- aggregate(steps~interval+lvl, mean, data=activity)
averStepswd$lvl <- as.factor(averStepswd$lvl)
library(reshape2)
averStepswd <- dcast(averStepswd, interval~lvl)
head(averStepswd)
plot(averStepswd$interval, averStepswd$weekday, type="l", xlab="Interval", ylab="Steps")
lines(averStepswd$interval, averStepswd$weekday, type="l", col = "red")
plot(averStepswd$interval, averStepswd$weekday, type="l", xlab="Interval", ylab="Steps")
plot(averStepswd$interval, averStepswd$weekend, type="l", xlab="Interval", ylab="Steps")
plot(averStepswd$interval, averStepswd$weekday, type="l", xlab="Interval", ylab="Steps")
lines(averStepswd$interval, averStepswd$weekend, type="l", col = "red")
legend("topright", c("Weekday", "Weekend"), lwd=1, col=c("black", "red"))
verStepswd <- aggregate(steps~interval+wdlvl, mean, data=activity)
lambdavals <- seq(0.005, 0.1, by=0.01)
nosim = 1000
t=100
t<-100
coverage <- sapply(lambdavals, funstion(lambda){
lhats <- rpois(nosim, lambda = lambda * t)/t
il <- lhats - qnorm(0.975)*sqrt(lhats/t)
ul <- lhats + qnorm(0.975)*sqrt(lhats/t)
mean(il<lambda & ul>lambda)
})
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t)/t
il <- lhats - qnorm(0.975)*sqrt(lhats/t)
ul <- lhats + qnorm(0.975)*sqrt(lhats/t)
mean(il<lambda & ul>lambda)
})
str(coverage)
?mean
mean <- 80
sd <- 10
DBP <- 70
pnorm(DBP,mean,sd)
?pnorm
mean<-1100
sd<-75
qnorm(0.95,mean, sd)
qnorm(0.95,mean, sd/10)
0.5^5*2
?poisson
setwd("~/Sergey/Coursera/DataScience/Statistical inference/Assignment")
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
lambda <- 0.2
lambda <- 0.2
lambda <- 0.2
set.seed(1)
size <- 40
trials <- 1000
n.trials <- 1000
lambda
lambda<-0.2
n=40
n.simulations <- 1000
exp.data = NULL
for(i in 1:n.simulations) exp.data <- c(exp.data, rexp(n,lambda))
View(exp.data)
head(exp.data)
exp.data = NULL
for(i in 1:n.simulations) exp.data <- cbind(exp.data, rexp(n,lambda))
?var
for(i in 1:n.simulations) {
tmp <- rexp(n,lambda)
exp.means <- c(exp.means, mean(tmp))
exp.variance <- c(exp.variance, var(tmp))
exp.data <- cbind(exp.data, rexp(n,lambda))
}
lambda<-0.2
n=40
n.simulations <- 1000
exp.data = NULL
exp.means <- NULL
exp.variance <- NULL
for(i in 1:n.simulations) {
tmp <- rexp(n,lambda)
exp.means <- c(exp.means, mean(tmp))
exp.variance <- c(exp.variance, var(tmp))
exp.data <- cbind(exp.data, rexp(n,lambda))
}
hist(sample_means,freq=FALSE)
hist(exp.means,freq=FALSE)
c(c("a","b"),c(1,2))
matrix(nrow = 4, data=c("a","b",1,2))
matrix(nrow = 2, data=c("a","b",1,2))
matrix(nrow = 2, data=c("a",1/lambda,"b",mean(exp.means)))
matrix(nrow = 2, data=c("a",1/lambda,"b",mean(exp.means)))
table(nrow = 2, data=c("a",1/lambda,"b",mean(exp.means)))
?dnorm
lines(rnorm(n,mean=1/lambda,sd=1/lambda))
lines(rnorm(n,mean=1/lambda,sd=1/lambda),col="red")
curve(dnorm(x, mean=1/lambda, sd=1/lambda), add=TRUE, col="blue", lwd=2)
curve(dnorm(x, mean=1/lambda, sd=1/lambda/sqrt(n)), add=TRUE, col="blue", lwd=2)
library(datasets)
str(ToothGrowth)
summary(ToothGrowth)
plot(ToothGrowth$dose, ToothGrowth$len)
len.dose0.5 <- ToothGrowth[ToothGrowth$dose==0.5]
len.dose0.5 <- ToothGrowth[ToothGrowth$dose==0.5]
w <- which(ToothGrowth$dose==0.5)
w
w <- which(ToothGrowth$dose==1)
w
w <- which(ToothGrowth$dose==2)
w
len.dose0.5 <- ToothGrowth[which(ToothGrowth$dose==0.5)]
ToothGrowth[1]
ToothGrowth[,1]
ToothGrowth[1,]
len.dose0.5 <- ToothGrowth[ToothGrowth$dose==0.5,]
str(ToothGrowth[ToothGrowth$dose %in% c(0.5,1),])
str(unique(ToothGrowth[ToothGrowth$dose %in% c(0.5,1),]$dose)
)
len.dose0.5 <- ToothGrowth[ToothGrowth$dose==0.5,]
mean(len.dose0.5[len.dose0.5$supp=="OJ"]$len)
len.dose0.5[len.dose0.5$supp=="OJ"]
len.dose0.5[len.dose0.5$supp=="OJ",]
mean(len.dose0.5[len.dose0.5$supp=="OJ",]$len)
